"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º starline_data.json.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API StarLine.
"""

import json
from pathlib import Path
from datetime import datetime

DATA_PATH = Path(__file__).parent.parent / "starline_data.json"


def _load_data():
    if DATA_PATH.exists():
        try:
            with open(DATA_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}


def get_status():
    data = _load_data()
    codestring = data.get("codestring")
    if codestring == "OK":
        return "üü¢"
    return "üî¥"


def get_update_timestamp():
    data = _load_data()
    devices = data.get("user_data", {}).get("devices", [])
    if devices:
        ts = devices[0].get("activity_ts")
        if ts:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            return datetime.fromtimestamp(ts).strftime("%d.%m.%Y %H:%M:%S")
    return None


def get_odb_mileage():
    data = _load_data()
    # –ü—Ä–∏–º–µ—Ä: return data.get("user_data", {}).get("devices", [{}])[0].get("obd", {}).get("mileage")
    devices = data.get("user_data", {}).get("devices", [])
    if devices and "obd" in devices[0]:
        return devices[0]["obd"].get("mileage")
    return None
